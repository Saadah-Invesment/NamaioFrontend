'use client';

import Link from 'next/link';
import { useRouter } from 'next/navigation';
import React, { useEffect, useState, useCallback, useMemo } from 'react';
import { FiEye, FiEyeOff, FiCheck, FiX, FiUser, FiMail, FiLock, FiStar, FiArrowRight } from 'react-icons/fi';
import { toast } from 'react-hot-toast';
import { registerapi } from '@/api/auth';
import { AxiosResponse } from 'axios';
import { motion } from 'framer-motion';
import SubscriptionTerms from './SubscriptionTerms';
import ProfitShareingTerms from './ProfitSharingTerms';

const SignupPage: React.FC = () => {
    const router = useRouter();

    // Form state
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [referralCode, setReferralCode] = useState('');
    const [password, setPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [loading, setLoading] = useState(false);

    // Validation state
    const [usernameValid, setUsernameValid] = useState<boolean | null>(null);
    const [emailValid, setEmailValid] = useState<boolean | null>(null);
    const [passwordValidations, setPasswordValidations] = useState({
        length: false,
        uppercase: false,
        number: false,
        symbol: false,
    });

    // Terms checkboxes
    const [agreedToSubscription, setAgreedToSubscription] = useState(false);
    const [agreedToProfitShare, setAgreedToProfitShare] = useState(false);
    const [agreedTorisk, setAgreedrisk] = useState(false);

    // Modals
    const [showSubscriptionModal, setShowSubscriptionModal] = useState(false);
    const [showProfitShareModal, setShowProfitShareModal] = useState(false);
    const [hasScrolledSubscription, setHasScrolledSubscription] = useState(false);
    const [hasScrolledProfitShare, setHasScrolledProfitShare] = useState(false);

    // Referral from URL
    useEffect(() => {
        const refParam = new URLSearchParams(window.location.search).get('ref');
        if (refParam) setReferralCode(refParam);
    }, []);

    // Validations
    useEffect(() => {
        setUsernameValid(username.length === 0 ? null : /^[a-zA-Z0-9_]{3,20}$/.test(username));
    }, [username]);

    useEffect(() => {
        setEmailValid(email.length === 0 ? null : /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email));
    }, [email]);

    useEffect(() => {
        setPasswordValidations({
            length: password.length >= 8,
            uppercase: /[A-Z]/.test(password),
            number: /\d/.test(password),
            symbol: /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password),
        });
    }, [password]);

    const ValidationIndicator = useMemo(
        () => ({ isValid }: { isValid: boolean | null }) => {
            if (isValid === null) return null;
            return isValid ? <FiCheck className="w-5 h-5 text-green-400" /> : <FiX className="w-5 h-5 text-red-400" />;
        },
        []
    );

    const isFormValid = useMemo(
        () =>
            usernameValid &&
            emailValid &&
            Object.values(passwordValidations).every((v) => v) &&
            agreedToSubscription &&
            agreedToProfitShare &&
            agreedTorisk,
        [usernameValid, emailValid, passwordValidations, agreedToSubscription, agreedToProfitShare, agreedTorisk]
    );

    const validateForm = useCallback(() => {
        if (!username || !email || !password) {
            toast.error('All fields are required');
            return false;
        }
        if (!usernameValid) {
            toast.error('Invalid username');
            return false;
        }
        if (!emailValid) {
            toast.error('Invalid email');
            return false;
        }
        if (!Object.values(passwordValidations).every((v) => v)) {
            toast.error('Password does not meet requirements');
            return false;
        }
        if (!agreedToSubscription || !agreedToProfitShare) {
            toast.error('You must agree to all terms');
            return false;
        }
        if (referralCode && referralCode.length > 8) {
            toast.error('Must be less than or equal to 8 characters');
            return false;
        }
        return true;
    }, [username, email, password, usernameValid, emailValid, passwordValidations, agreedToSubscription, agreedToProfitShare]);

    const registerUser = useCallback(async () => {
        if (!validateForm()) return;

        setLoading(true);
        try {
            const res: AxiosResponse = await registerapi(username, email, password, referralCode, {
                agreedToSubscription,
                agreedToProfitShare,
            });

            if (res.status !== 201) throw new Error(res.data.message || 'Registration failed');

            toast.success('Account created successfully!');
            router.replace('/login');
        } catch (err: any) {
            console.error("Axios error:", err);

            if (err.response) {
                const data = err.response.data;

                // ✅ Case 1: Single error string (detail)
                if (data?.detail) {
                    toast.error(data.detail);
                }
                // ✅ Case 2: Non-field errors (DRF common format)
                else if (data?.non_field_errors) {
                    toast.error(data.non_field_errors.join(", "));
                }
                // ✅ Case 3: Field-specific errors (like username, email)
                else if (typeof data === "object") {
                    const messages: string[] = [];
                    for (const key in data) {
                        if (Array.isArray(data[key])) {
                            messages.push(...data[key]); // merge all field error messages
                        } else if (typeof data[key] === "string") {
                            messages.push(data[key]);
                        }
                    }
                    if (messages.length > 0) {
                        toast.error(messages.join(" | "));
                    } else {
                        toast.error("An error occurred. Please try again.");
                    }
                }
                // ✅ Fallback
                else {
                    toast.error(data?.message || "Request failed");
                }
            }
            else if (err.request) {
                // Request made but no response
                toast.error("Network error - please try again");
            }
            else {
                // Something else
                toast.error("Unexpected error occurred");
            }
        } finally {
            setLoading(false);
        }
    }, [username, email, password, referralCode, agreedToSubscription, agreedToProfitShare, validateForm, router]);

    // Scroll handlers
    const handleScrollSubscription = (e: React.UIEvent<HTMLDivElement>) => {
        const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
        if (scrollTop + clientHeight >= scrollHeight - 20) setHasScrolledSubscription(true);
    };
    const handleScrollProfitShare = (e: React.UIEvent<HTMLDivElement>) => {
        const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
        if (scrollTop + clientHeight >= scrollHeight - 20) setHasScrolledProfitShare(true);
    };

    return (
        <section className="relative min-h-screen flex items-center justify-center py-10 px-4 text-white">
            <motion.div
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6 }}
                className="w-full max-w-lg bg-gray-800/50 backdrop-blur-xl rounded-2xl shadow-2xl p-8 border border-gray-700/50"
            >
                <div className="text-center mb-6">
                    <h2 className="text-3xl font-bold mb-2">Join Tezcai</h2>
                    <p className="text-gray-300">Start your automated trading journey</p>
                </div>

                <form className="space-y-6" onSubmit={(e) => e.preventDefault()}>
                    {/* Username */}
                    <div>
                        <label className="block text-sm font-medium mb-2 text-gray-300">Username</label>
                        <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <FiUser className="h-5 w-5 text-gray-400" />
                            </div>
                            <input
                                type="text"
                                value={username}
                                onChange={(e) => setUsername(e.target.value)}
                                placeholder="Choose a username"
                                className={`w-full pl-12 pr-12 py-3 bg-gray-700/50 border rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 transition ${usernameValid === null ? 'border-gray-600 focus:ring-blue-500' : usernameValid ? 'border-green-500 focus:ring-green-500' : 'border-red-500 focus:ring-red-500'
                                    }`}
                            />
                            <div className="absolute inset-y-0 right-0 pr-4 flex items-center">
                                <ValidationIndicator isValid={usernameValid} />
                            </div>
                        </div>
                        {username.length > 0 && !usernameValid && <p className="mt-2 text-sm text-red-400">3-20 characters, letters, numbers, underscores only</p>}
                    </div>

                    {/* Email */}
                    <div>
                        <label className="block text-sm font-medium mb-2 text-gray-300">Email</label>
                        <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <FiMail className="h-5 w-5 text-gray-400" />
                            </div>
                            <input
                                type="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                placeholder="Enter your email"
                                className={`w-full pl-12 pr-12 py-3 bg-gray-700/50 border rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 transition ${emailValid === null ? 'border-gray-600 focus:ring-blue-500' : emailValid ? 'border-green-500 focus:ring-green-500' : 'border-red-500 focus:ring-red-500'
                                    }`}
                            />
                            <div className="absolute inset-y-0 right-0 pr-4 flex items-center">
                                <ValidationIndicator isValid={emailValid} />
                            </div>
                        </div>
                        {email.length > 0 && !emailValid && <p className="mt-2 text-sm text-red-400">Enter a valid email address</p>}
                    </div>
                    {/* Referral */}
                    <div>
                        <label className="block text-sm font-medium mb-2 text-gray-300">Referral Code (optional)</label>
                        <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <FiStar className="h-5 w-5 text-gray-400" />
                            </div>
                            <input
                                type="text"
                                value={referralCode}
                                onChange={(e) => setReferralCode(e.target.value)}
                                placeholder="Enter referral code"
                                className="w-full pl-12 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500 transition"
                            />
                        </div>

                        {referralCode && (
                            <div
                                className={`mt-2 flex items-center gap-2 ${referralCode.length <= 8 ? "text-green-400" : "text-red-400"
                                    }`}
                            >
                                {referralCode.length <= 8 ? (
                                    <FiCheck className="w-3 h-3" />
                                ) : (
                                    <div>   <FiX className="w-3 h-3" />   Must be less than or equal to 8 characters </div>
                                )}

                            </div>
                        )}



                    </div>

                    {/* Password */}
                    <div>
                        <label className="block text-sm font-medium mb-2 text-gray-300">Password</label>
                        <div className="relative">
                            <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                                <FiLock className="h-5 w-5 text-gray-400" />
                            </div>
                            <input
                                type={showPassword ? 'text' : 'password'}
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                placeholder="Create a strong password"
                                className="w-full pl-12 pr-12 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                            />
                            <button
                                type="button"
                                onClick={() => setShowPassword(!showPassword)}
                                className="absolute inset-y-0 right-0 pr-4 flex items-center text-gray-400 hover:text-blue-400 transition-colors"
                            >
                                {showPassword ? <FiEyeOff size={20} /> : <FiEye size={20} />}
                            </button>
                        </div>
                        {password.length > 0 && (
                            <div className="mt-3 bg-gray-700/30 rounded-lg p-4 space-y-2 text-xs">
                                <div className={`flex items-center gap-2 ${passwordValidations.length ? 'text-green-400' : 'text-red-400'}`}>
                                    {passwordValidations.length ? <FiCheck className="w-3 h-3" /> : <FiX className="w-3 h-3" />} 8+ characters
                                </div>
                                <div className={`flex items-center gap-2 ${passwordValidations.uppercase ? 'text-green-400' : 'text-red-400'}`}>
                                    {passwordValidations.uppercase ? <FiCheck className="w-3 h-3" /> : <FiX className="w-3 h-3" />} Uppercase letter
                                </div>
                                <div className={`flex items-center gap-2 ${passwordValidations.number ? 'text-green-400' : 'text-red-400'}`}>
                                    {passwordValidations.number ? <FiCheck className="w-3 h-3" /> : <FiX className="w-3 h-3" />} Number
                                </div>
                                <div className={`flex items-center gap-2 ${passwordValidations.symbol ? 'text-green-400' : 'text-red-400'}`}>
                                    {passwordValidations.symbol ? <FiCheck className="w-3 h-3" /> : <FiX className="w-3 h-3" />} Special symbol
                                </div>
                            </div>
                        )}
                    </div>



                    {/* Terms Checkboxes */}
                    <div className="space-y-4">
                        {/* Subscription Terms */}
                        <div className="flex items-center gap-2">
                            <input
                                type="checkbox"
                                checked={agreedToSubscription}
                                // disabled={!hasScrolledSubscription}
                                onChange={(e) => setAgreedToSubscription(e.target.checked)}
                                className="h-4 w-4 cursor-pointer"
                                id="subscription-checkbox"
                            />
                            <label htmlFor="subscription-checkbox" className="flex items-center text-sm text-gray-300 cursor-pointer">
                                I agree to the{' '}
                                <Link href={"/terms-and-conditions"}>
                                    <span
                                        className="ml-1 underline text-blue-400 hover:text-blue-500"
                                    // onClick={(e) => {
                                    //   e.stopPropagation(); // prevent checkbox toggle
                                    //   setShowSubscriptionModal(true);
                                    //   setHasScrolledSubscription(false);
                                    // }}
                                    >
                                        Terms And Conditions
                                    </span>
                                </Link>

                            </label>
                        </div>

                        {/* Profit Sharing Terms */}
                        <div className="flex items-center gap-2">
                            <input
                                type="checkbox"
                                checked={agreedToProfitShare}
                                // disabled={!hasScrolledProfitShare}
                                onChange={(e) => setAgreedToProfitShare(e.target.checked)}
                                className="h-4 w-4 cursor-pointer"
                                id="profit-checkbox"
                            />
                            <label htmlFor="profit-checkbox" className="flex items-center text-sm text-gray-300 cursor-pointer">
                                I agree to the{' '}

                                <Link href={"/privacy-policy"}>  <span
                                    className="ml-1 underline text-blue-400 hover:text-blue-500"

                                >
                                    Privacy Policy
                                </span></Link>
                            </label>
                        </div>

                        <div className="flex items-center gap-2">
                            <input
                                type="checkbox"
                                checked={agreedTorisk}
                                // disabled={!hasScrolledProfitShare}
                                onChange={(e) => setAgreedrisk(e.target.checked)}
                                className="h-4 w-4 cursor-pointer"
                                id="profit-checkbox"
                            />
                            <label htmlFor="profit-checkbox" className="flex items-center text-sm text-gray-300 cursor-pointer">
                                I agree to the{' '}

                                <Link href={"/risk-disclosure"}>  <span
                                    className="ml-1 underline text-blue-400 hover:text-blue-500"

                                >
                                    Risk Disclosure
                                </span></Link>
                            </label>
                        </div>
                    </div>


                    {/* Register Button */}
                    <button
                        type="button"
                        disabled={loading || !isFormValid}
                        onClick={registerUser}
                        className={`w-full font-semibold py-4 rounded-xl flex items-center justify-center gap-2 transition-all duration-300 ${loading || !isFormValid
                            ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                            : 'bg-gradient-to-r from-blue-600 to-green-800 text-white shadow-lg hover:scale-105'
                            }`}
                    >
                        {loading ? 'Loading...' : 'Register'}
                        <FiArrowRight className="w-5 h-5" />
                    </button>

                    <div className="text-center pt-4 border-t border-gray-700/50">
                        <p className="text-gray-400">
                            Already have an account?{' '}
                            <Link href="/login" className="text-blue-400 hover:text-blue-300 font-medium transition-colors">
                                Sign In
                            </Link>
                        </p>
                    </div>
                </form>
            </motion.div>

            {/* Subscription Modal */}
            {showSubscriptionModal && (
                <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
                    <div className="bg-gray-900 p-6 rounded-lg w-full max-w-4xl relative">
                        <h3 className="text-xl font-bold mb-4">Subscription Terms</h3>
                        <div className="h-96 overflow-y-auto border p-3" onScroll={handleScrollSubscription}>
                            <SubscriptionTerms />
                        </div>
                        <button
                            onClick={() => setShowSubscriptionModal(false)}
                            className="mt-4 px-6 py-2 bg-blue-600 rounded-lg hover:bg-blue-700"
                        >
                            Close
                        </button>
                    </div>
                </div>
            )}

            {showProfitShareModal && (
                <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50">
                    <div className="bg-gray-900 p-6 rounded-lg w-full max-w-4xl relative">
                        <h3 className="text-xl font-bold mb-4">Profit Sharing Terms</h3>
                        <div className="h-96 overflow-y-auto border p-3" onScroll={handleScrollProfitShare}>
                            <ProfitShareingTerms />
                        </div>
                        <button
                            onClick={() => setShowProfitShareModal(false)}
                            className="mt-4 px-6 py-2 bg-blue-600 rounded-lg hover:bg-blue-700"
                        >
                            Close
                        </button>
                    </div>
                </div>
            )}

        </section>
    );
};

export default SignupPage;
