'use client';

import React, { useEffect, useState, useMemo } from "react";
import DashboardChart from "@/components/UI/DashboardChar";
import PortfolioTable from "@/components/UI/PortfolioTable";
import { FiRefreshCw } from "react-icons/fi";
import { getBalance, getTradeSignals, getTrades } from "@/api/dashboard";
import { getbinanceKeys, postbinanceKeys } from "@/api/setapikeys";
import toast from "react-hot-toast";
import { FaToggleOff, FaToggleOn } from "react-icons/fa6";
import { FiInfo, FiSearch, FiChevronLeft, FiChevronRight, FiChevronDown } from "react-icons/fi";
import SummaryCards from "./SummaryCard";
import TradeTable from "./TradeTable";
type Signal = {
  id: number;
  symbol: string;
  score: number;
  decision: string;
  reason?: string;
  tp_percent?: number;
  sl_percent?: number;
  time_window?: string;
  created_at: string;
  used?: boolean;
};

function formatDate(iso: string) {
  try {
    const d = new Date(iso);
    return d.toLocaleString(); // local format
  } catch {
    return iso;
  }
}

const chartData = {
  labels: ["Bitcoin", "Ethereum", "Others"],
  datasets: [
    {
      label: "Portfolio Distribution",
      data: [50, 30, 20],
      backgroundColor: ["#FFB811", "#304FFF", "#DDA343"],
      borderColor: "#010118",
      borderWidth: 2,
    },
  ],
};

function scoreColor(score: number) {
  if (score >= 80) return "bg-green-600";
  if (score >= 60) return "bg-yellow-500";
  return "bg-red-500";
}

export default function DashboardPage() {
  const [data, setData] = useState<Signal[] | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [refreshing, setRefreshing] = useState(false);

  const [apiKey, setApiKey] = useState("");
  const [secretKey, setSecretKey] = useState("");
  const [active, setActive] = useState(true);
  const [saved, setSaved] = useState(false);
  const [apikeyError, setApiKeyError] = useState(false);
  const [loadingApiKey, setLoadingApiKey] = useState(false);
  /* --- inside your component --- */

  const [search, setSearch] = useState("");
  const [sortBy, setSortBy] = useState<"symbol" | "score" | "created_at" | "used">("created_at");
  const [sortDir, setSortDir] = useState<"asc" | "desc">("desc");
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);

  const [balance, setBalance] = useState({
    "usdt_balance": 0,
    "pnl_usd": 0.0,
    "pnl_pct": 0.0
  })
  const [loadingBalance, setloadingBalance] = useState(false)

  const [trades, setTrades] = useState([])
  const [loadingtrades, setloadingTrades] = useState(false)

  // Reset page when filters change
  useEffect(() => setPage(1), [search, sortBy, sortDir, pageSize]);

  const [showModal, setShowModal] = useState(false);
  const fetchSignals = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await getTradeSignals()

      if (res.status !== 200) {

        throw new Error("error");
      }

      const json = res.data;
      // expect an array
      setData(Array.isArray(json) ? json : []);
    } catch (err: any) {
      console.error("Fetch signals error:", err);
      setError(err?.message || "Failed to load signals");
      setData(null);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  const fetchbalance = async () => {
    setloadingBalance(true);
    try {
      const res = await getBalance()

      if (res.status !== 200) {

        throw new Error("error");
      }

      const json = res.data;
      setBalance(json)

    } catch (err: any) {
      console.error("Fetch signals error:", err);

    } finally {
      setloadingBalance(false);
    }
  };

  const fetchtrades = async () => {
    setloadingTrades(true);
    try {
      const res = await getTrades()

      if (res.status !== 200) {

        throw new Error("error");
      }

      const json = res.data;
      setTrades(json)

    } catch (err: any) {
      console.error("Fetch signals error:", err);

    } finally {
      setloadingTrades(false);
    }
  };

  useEffect(() => {
    fetchbalance();
    fetchtrades()
    fetchSignals();

  }, []);

  useEffect(() => {
    const fetchKeys = async () => {
      setLoadingApiKey(true)
      setApiKeyError(false)
      try {
        const res = await getbinanceKeys();
        const data = res.data;
        setApiKey(data.api_key);
        setSecretKey(data.api_secret);
        setActive(data.active);
      } catch (err) {
        setApiKeyError(true)
        console.log("No keys found or unauthorized");
      } finally {
        setLoadingApiKey(false)
      }
    };

    fetchKeys();
  }, []);


  const handleSaveClick = () => {
    if (!apiKey || !secretKey) {
      toast.error("API Key and Secret Key are required");
      return;
    }
    setShowModal(true);
  };

  const confirmSave = async () => {
    setLoadingApiKey(true);
    try {
      const payload = {
        api_key: apiKey,
        api_secret: secretKey,
        active: !active,
      };

      const res = await postbinanceKeys(payload);
      if (res.status === 200) {
        setActive((prev) => !prev);
        toast.success("Status Changed successfully");
        setSaved(true);
        setTimeout(() => setSaved(false), 2000);
        setShowModal(false);
      }

    } catch (err: any) {
      console.error(err);
      toast.error("Failed to save keys");
    } finally {
      setLoadingApiKey(false);
    }
  };

  const toggleActive = () => {
    handleSaveClick()
  }

  // Derived filtered + sorted data
  const processed = useMemo(() => {
    if (!data) return [];

    // 1) filter
    const q = search.trim().toLowerCase();
    let filtered = q
      ? data.filter((s) => {
        const symbol = (s.symbol || "").toLowerCase();
        const reason = (s.reason || "").toLowerCase();
        return symbol.includes(q) || reason.includes(q);
      })
      : [...data];

    // 2) sort
    filtered.sort((a, b) => {
      let av: any = a[sortBy];
      let bv: any = b[sortBy];

      // normalize
      if (sortBy === "symbol") {
        av = (av || "").toString().toLowerCase();
        bv = (bv || "").toString().toLowerCase();
      } else if (sortBy === "created_at") {
        av = new Date(av || 0).getTime();
        bv = new Date(bv || 0).getTime();
      } else if (sortBy === "used") {
        av = a.used ? 1 : 0;
        bv = b.used ? 1 : 0;
      } else if (sortBy === "score") {
        av = Number(av || 0);
        bv = Number(bv || 0);
      }

      if (av < bv) return sortDir === "asc" ? -1 : 1;
      if (av > bv) return sortDir === "asc" ? 1 : -1;
      return 0;
    });

    return filtered;
  }, [data, search, sortBy, sortDir]);

  const total = processed.length;
  const totalPages = Math.max(1, Math.ceil(total / pageSize));
  const pageData = processed.slice((page - 1) * pageSize, page * pageSize);

  // helper to toggle sort when header clicked
  const handleSort = (field: typeof sortBy) => {
    if (sortBy === field) {
      setSortDir((d) => (d === "asc" ? "desc" : "asc"));
    } else {
      setSortBy(field);
      setSortDir("desc");
    }
  };
  return (
    <div className="p-6 space-y-6">
      <div className="flex items-start justify-between gap-4">
        <div>
          <h2 className="text-3xl font-bold text-foreground">Dashboard</h2>
          <p className="text-sm text-gray-400 mt-1">Overview of your account & latest trading signals</p>
        </div>

        <div className="flex items-center gap-2">
          {!apikeyError && apiKey && <div className="flex items-center">
            <span className="text-white">Namaio Bot Status:</span>
            {loadingApiKey ? <div>loading...</div> : <button
              onClick={toggleActive}
              className="text-xl ml-2 px-2"
              title="Toggle Active"
            >
              {active ? (
                <FaToggleOn className="text-green-400" />
              ) : (
                <FaToggleOff className="text-gray-400" />
              )}
            </button>}
          </div>}
          <button
            onClick={() => { setRefreshing(true); fetchSignals(); }}
            className="inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-white/10 hover:bg-white/20 text-foreground transition"
            aria-label="Refresh signals"
          >
            <FiRefreshCw />
            <span className="text-sm">{refreshing ? "Refreshing..." : "Refresh"}</span>
          </button>
        </div>
      </div>
      {/* Summary Cards */}
      <SummaryCards balance={balance} loading={loadingBalance} />


      <TradeTable trades={trades} loading={loadingtrades} />
      {/* Signals section */}

      <div className="bg-[#0e0e25] p-4 rounded-xl shadow-md">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold">Latest Signals is<span className="ml-2 text-lg text-brown font-bold">{data ? `${data[0].symbol}` : "—"}</span></h3>
          <p className="ml-2 text-lg text-green-400 font-bold">{data ? `${data.length} signals` : "—"}</p>
        </div>

        {/* Controls: Search, Sort, Page Size */}
        <div className="flex flex-col md:flex-row gap-3 md:items-center md:justify-between mb-4">
          <div className="flex items-center gap-2 w-full md:w-1/2">
            <div className="relative flex-1">
              <FiSearch className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
              <input
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                placeholder="Search by symbol or reason..."
                className="w-full pl-10 pr-4 py-2 bg-white/5 rounded-lg focus:outline-none focus:ring-2 focus:ring-[var(--brown)]"
                aria-label="Search signals"
              />
            </div>

            <div className="flex items-center gap-2">
              <label className="text-sm text-gray-400">Show</label>
              <select
                value={pageSize}
                onChange={(e) => setPageSize(Number(e.target.value))}
                className="bg-white/5 px-1 py-1 rounded-lg"
                aria-label="Page size"
              >
                {[5, 10, 20, 50].map((n) => (
                  <option className="bg-background" key={n} value={n}>
                    {n}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="flex items-center gap-3">
            <div className="text-sm text-gray-400 hidden sm:inline">Sort by</div>
            <div className="flex items-center gap-2">
              <button
                onClick={() => handleSort("created_at")}
                className={`px-3 py-2 rounded-lg text-sm ${sortBy === "created_at" ? "bg-white/10 text-white" : "bg-transparent text-gray-300 hover:bg-white/5"}`}
              >
                Date {sortBy === "created_at" ? (sortDir === "asc" ? "↑" : "↓") : null}
              </button>
              <button
                onClick={() => handleSort("score")}
                className={`px-3 py-2 rounded-lg text-sm ${sortBy === "score" ? "bg-white/10 text-white" : "bg-transparent text-gray-300 hover:bg-white/5"}`}
              >
                Score {sortBy === "score" ? (sortDir === "asc" ? "↑" : "↓") : null}
              </button>
              <button
                onClick={() => handleSort("symbol")}
                className={`px-3 py-2 rounded-lg text-sm ${sortBy === "symbol" ? "bg-white/10 text-white" : "bg-transparent text-gray-300 hover:bg-white/5"}`}
              >
                Symbol {sortBy === "symbol" ? (sortDir === "asc" ? "↑" : "↓") : null}
              </button>
            </div>
          </div>
        </div>

        {/* Loading / Error / Empty handling (preserve your existing behavior) */}
        {loading && (
          <div className="space-y-3">
            {[1, 2, 3].map((i) => (
              <div key={i} className="animate-pulse flex items-center gap-4">
                <div className="w-12 h-12 bg-white/5 rounded" />
                <div className="flex-1">
                  <div className="h-3 bg-white/5 rounded w-3/4 mb-2" />
                  <div className="h-3 bg-white/5 rounded w-1/2" />
                </div>
                <div className="w-24 h-8 bg-white/5 rounded" />
              </div>
            ))}
          </div>
        )}

        {error && !loading && (
          <div className="py-6 text-center">
            <p className="text-sm text-red-400 mb-3">Error: {error}</p>
            <button onClick={fetchSignals} className="px-4 py-2 rounded bg-red-600 text-white">
              Retry
            </button>
          </div>
        )}

        {!loading && !error && processed.length === 0 && (
          <div className="py-8 text-center text-gray-400">No signals found.</div>
        )}

        {/* Desktop table */}
        {!loading && !error && pageData.length > 0 && (
          <div className="hidden md:block">
            <table className="w-full text-left">
              <thead>
                <tr className="text-sm text-gray-400 border-b border-white/6">
                  <th className="py-3 px-2 cursor-pointer" onClick={() => handleSort("symbol")}>
                    Symbol {sortBy === "symbol" ? (sortDir === "asc" ? "▲" : "▼") : null}
                  </th>
                  <th className="py-3 px-2 cursor-pointer" onClick={() => handleSort("score")}>
                    Score {sortBy === "score" ? (sortDir === "asc" ? "▲" : "▼") : null}
                  </th>
                  <th className="py-3 px-2">Decision</th>
                  <th className="py-3 px-2">TP / SL</th>
                  <th className="py-3 px-2">Time Window</th>
                  <th className="py-3 px-2 cursor-pointer" onClick={() => handleSort("created_at")}>
                    Created {sortBy === "created_at" ? (sortDir === "asc" ? "▲" : "▼") : null}
                  </th>
                  <th className="py-3 px-2 text-right cursor-pointer" onClick={() => handleSort("used")}>
                    Used {sortBy === "used" ? (sortDir === "asc" ? "▲" : "▼") : null}
                  </th>
                </tr>
              </thead>
              <tbody>
                {pageData.map((s) => (
                  <tr key={s.id} className="border-b border-white/6 hover:bg-white/2 transition">
                    <td className="py-3 px-2 align-top">
                      <div className="flex items-center gap-2">
                        <span className="font-semibold">{s.symbol}</span>
                        {s.reason && (
                          <div className="relative group">
                            <FiInfo className="w-4 h-4 text-gray-400 cursor-pointer hover:text-white" />
                            <div className="absolute left-1/2 -translate-x-1/2 bottom-full mb-2 hidden group-hover:block w-64 p-2 bg-black text-white text-xs rounded shadow-lg z-10">
                              {s.reason}
                            </div>
                          </div>
                        )}
                      </div>
                    </td>

                    <td className="py-3 px-2 align-top">
                      <div className="flex items-center gap-3">
                        <div className={`px-2 py-1 rounded text-sm font-semibold ${scoreColor(s.score)}`}>{s.score}</div>
                      </div>
                    </td>

                    <td className="py-3 px-2 align-top">
                      <span className={`px-2 py-1 rounded text-sm font-semibold ${s.decision.toLowerCase() === "yes" ? "bg-green-600 text-white" : "bg-red-600 text-white"}`}>
                        {s.decision}
                      </span>
                    </td>

                    <td className="py-3 px-2 align-top">
                      <div className="text-sm">{s.tp_percent ? `${s.tp_percent}%` : "—"}</div>
                      <div className="text-xs text-gray-400">SL: {s.sl_percent ? `${s.sl_percent}%` : "—"}</div>
                    </td>

                    <td className="py-3 px-2 align-top text-sm text-gray-300">{s.time_window || "—"}</td>

                    <td className="py-3 px-2 align-top text-sm text-gray-300">{formatDate(s.created_at)}</td>

                    <td className="py-3 px-2 align-top text-right">
                      {s.used ? <span className="text-sm px-2 py-1 bg-white/5 rounded text-green-300">Yes</span> : <span className="text-sm px-2 py-1 bg-white/5 rounded text-gray-400">No</span>}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            {/* Pagination controls */}
            <div className="mt-4 flex items-center justify-between">
              <div className="text-sm text-gray-400">
                Showing <span className="text-white">{(page - 1) * pageSize + 1}</span>–<span className="text-white">{Math.min(page * pageSize, total)}</span> of <span className="text-white">{total}</span>
              </div>

              <div className="flex items-center gap-2">
                <button
                  onClick={() => setPage((p) => Math.max(1, p - 1))}
                  disabled={page <= 1}
                  className="px-3 py-1 rounded bg-white/5 hover:bg-white/10 disabled:opacity-50"
                  aria-label="Previous page"
                >
                  <FiChevronLeft />
                </button>
                <div className="px-3 py-1 rounded bg-white/5">
                  Page {page} / {totalPages}
                </div>
                <button
                  onClick={() => setPage((p) => Math.min(totalPages, p + 1))}
                  disabled={page >= totalPages}
                  className="px-3 py-1 rounded bg-white/5 hover:bg-white/10 disabled:opacity-50"
                  aria-label="Next page"
                >
                  <FiChevronRight />
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Mobile card list (paginated too) */}
        {!loading && !error && pageData.length > 0 && (
          <div className="md:hidden space-y-3">
            {pageData.map((s) => (
              <div key={s.id} className="p-3 bg-[#081027] rounded-lg">
                <div className="flex items-start justify-between gap-3">
                  <div>
                    <div className="flex items-center gap-2">
                      <div className="text-lg font-semibold">{s.symbol}</div>
                      <div className={`text-xs px-2 py-0.5 rounded ${scoreColor(s.score)} text-white`}>{s.score}</div>
                    </div>
                    <div className="text-xs text-gray-400 mt-1">{s.reason}</div>
                    <div className="flex items-center gap-3 mt-2 text-sm">
                      <div className="text-gray-300">TP: {s.tp_percent ? `${s.tp_percent}%` : "—"}</div>
                      <div className="text-gray-300">SL: {s.sl_percent ? `${s.sl_percent}%` : "—"}</div>
                    </div>
                    <div className="text-xs text-gray-400 mt-2">Window: {s.time_window || "—"}</div>
                  </div>

                  <div className="text-right">
                    <div className={`mb-2 text-sm ${s.decision.toLowerCase() === "yes" ? "text-green-400" : "text-red-400"}`}>{s.decision}</div>
                    <div className="text-xs text-gray-400">{formatDate(s.created_at)}</div>
                    <div className="mt-2">
                      {s.used ? <span className="text-xs px-2 py-1 bg-white/5 rounded text-green-300">Used</span> : <span className="text-xs px-2 py-1 bg-white/5 rounded text-gray-400">New</span>}
                    </div>
                  </div>
                </div>
              </div>
            ))}

            {/* mobile pagination */}
            <div className="flex items-center justify-between mt-3">
              <button
                onClick={() => setPage((p) => Math.max(1, p - 1))}
                disabled={page <= 1}
                className="px-3 py-2 rounded bg-white/5 hover:bg-white/10 disabled:opacity-50"
              >
                <FiChevronLeft />
              </button>
              <div className="text-sm text-gray-400">
                Page {page} / {totalPages}
              </div>
              <button
                onClick={() => setPage((p) => Math.min(totalPages, p + 1))}
                disabled={page >= totalPages}
                className="px-3 py-2 rounded bg-white/5 hover:bg-white/10 disabled:opacity-50"
              >
                <FiChevronRight />
              </button>
            </div>
          </div>
        )}
      </div>

      {!loading && !error && data && data.length > 0 && (
        <div className="md:hidden space-y-3">
          {data.map(s => (
            <div key={s.id} className="p-3 bg-[#081027] rounded-lg">
              <div className="flex items-start justify-between gap-3">
                <div>
                  <div className="flex items-center gap-2">
                    <div className="text-lg font-semibold">{s.symbol}</div>
                    <div className={`text-xs px-2 py-0.5 rounded ${scoreColor(s.score)} text-white`}>{s.score}</div>
                  </div>
                  <div className="text-xs text-gray-400 mt-1">{s.reason}</div>
                  <div className="flex items-center gap-3 mt-2 text-sm">
                    <div className="text-gray-300">TP: {s.tp_percent ? `${s.tp_percent}%` : '—'}</div>
                    <div className="text-gray-300">SL: {s.sl_percent ? `${s.sl_percent}%` : '—'}</div>
                  </div>
                  <div className="text-xs text-gray-400 mt-2">Window: {s.time_window || '—'}</div>
                </div>

                <div className="text-right">
                  <div className={`mb-2 text-sm ${s.decision.toLowerCase() === 'yes' ? 'text-green-400' : 'text-red-400'}`}>{s.decision}</div>
                  <div className="text-xs text-gray-400">{formatDate(s.created_at)}</div>
                  <div className="mt-2">
                    {s.used ? <span className="text-xs px-2 py-1 bg-white/5 rounded text-green-300">Used</span> : <span className="text-xs px-2 py-1 bg-white/5 rounded text-gray-400">New</span>}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}




      {showModal && (
        <div className="fixed inset-0 bg-black/70 z-50 flex items-center justify-center">
          <div className="bg-white rounded-xl p-6 max-w-md w-full space-y-4 shadow-xl text-black">
            <h2 className="text-lg font-semibold">⚠️ Confirm </h2>
            <p>
              Once you save your trading bot will be
              <span className="text-green-500 font-bold">{active ? " Deactivated" : " Activated"}</span> and
              <span className="text-blue-900 font-bold"> {active ? " Stop" : " Start"}</span> executing trades.

            </p>
            <div className="flex justify-end gap-3 pt-4">
              <button
                onClick={() => setShowModal(false)}
                className="px-4 py-2 bg-gray-200 rounded-lg hover:bg-gray-300"
              >
                Cancel
              </button>
              <button
                onClick={confirmSave}
                disabled={loadingApiKey}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
              >
                {loadingApiKey ? "Saving..." : "Yes"}
              </button>
            </div>
          </div>
        </div>
      )}

    </div>
  );
}
